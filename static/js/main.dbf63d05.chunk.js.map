{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","bombs","setBombs","clicked","setClicked","buttonStyle","width","height","backgroundColor","color","verticalAlign","fontSize","fontFamily","borderLeft","borderTop","borderBottom","borderRight","display","visitStyle","fontWeight","border","visitCell","i","j","alert","window","location","reload","length","dfsCells","className","map","arr","index","elem","onClick","style","bombArr","Array","fill","bombPos","Math","floor","random","sum","cover","generateBombs","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbf63d05.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [bombs, setBombs] = useState([])\n  const [clicked, setClicked] = useState([])\n\n  const buttonStyle = {\n    width: 40,\n    height: 40,\n    backgroundColor: '#888',\n    color: 'black',\n    verticalAlign: 'top',\n    fontSize: '32px',\n    fontFamily: 'Arial, Helvetica, sans-serif;',\n    borderLeft: '5px solid rgb(220,220,220)',\n    borderTop: '5px solid rgb(220,220,220)',\n    borderBottom: '5px solid #333',\n    borderRight: '5px solid #333',\n    display: 'inline-block'\n  }\n  const visitStyle = {\n    width: 48,\n    height: 48,\n    backgroundColor: '#555',\n    color: 'white',\n    fontWeight: 'bold',\n    border: '1px solid black',\n    verticalAlign: 'top',\n    fontSize: '32px',\n    fontFamily: 'Poppins, sans-serif',\n    display: 'inline-block'\n  }\n\n  const generateBombs = () => {\n    let bombArr = Array(10).fill(0).map(elem => Array(10).fill(0))\n\n    for(let i = 0; i < bombArr.length; i++){\n      let bombPos = Math.floor(Math.random() * 10)\n      bombArr[i][bombPos] = 'X'\n    }\n\n    for(let i = 0; i < bombArr.length; i++){\n      for(let j = 0; j < bombArr[i].length; j++){\n        if(bombArr[i][j] !== 'X'){\n          let sum = 0\n\n          if(i > 0 && bombArr[i-1][j] == 'X') sum++\n          if(i < bombArr.length - 1 && bombArr[i+1][j] == 'X') sum++\n          if(j < bombArr.length - 1 && bombArr[i][j+1] == 'X') sum++\n          if(j > 0 && bombArr[i][j-1] == 'X') sum++\n          if(i < bombArr.length - 1 && j > 0 && bombArr[i+1][j-1] == 'X') sum++\n          if(i < bombArr.length - 1 && j < bombArr.length - 1 && bombArr[i+1][j+1] == 'X') sum++\n          if(i > 0 && j > 0 && bombArr[i-1][j-1] == 'X' ) sum++\n          if(i > 0 && j < bombArr.length - 1 && bombArr[i-1][j+1] == 'X' ) sum++\n\n          bombArr[i][j] = sum\n        }\n      }\n    }\n    setBombs(bombArr)\n\n    let cover = Array(10).fill(0).map(elem => Array(10).fill(0))\n    setClicked(cover)\n  }\n\n  const visitCell = (i, j) => {\n    if(bombs[i][j] == 'X') {\n      alert(\"You lost! Game over!\")\n      window.location.reload();\n    }\n    dfsCells(i, j)\n    clicked[i][j] = 1\n    setClicked([...clicked])\n  }\n\n  function dfsCells(i, j) {\n    if(i < 0 || i > clicked.length - 1 || j < 0 || j > clicked[0].length - 1 || clicked[i][j] == 1 || bombs[i][j] == 'X') return\n\n    clicked[i][j] = 1\n\n    setClicked([...clicked])\n   \n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className={'title'}> SIMPLIFIED MINESWEEPER </div>\n        \n        {bombs.map((arr, index) =>\n          <div>\n            {arr.map((elem, i) =>\n              <div\n                onClick={() => visitCell(index, i)}\n                style={clicked[index][i] == 0 ? buttonStyle : visitStyle}>\n                {clicked[index][i] == 0 ? null : bombs[index][i] == 0 ? '' : bombs[index][i] }\n              </div>\n            )}\n          </div>\n        )}\n        <button\n          className='new'\n          onClick={() => generateBombs()}>Start New Game</button>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}